#!/usr/bin/env python3
"""
CNS Raspador - Interface Principal de Linha de Comando

Interface de linha de comando para coletar resolu√ß√µes do CNS (Conselho Nacional 
de Sa√∫de) do site oficial do governo brasileiro.

Este script oferece comandos para:
- Coletar metadados das resolu√ß√µes do site do CNS
- Baixar os arquivos PDF das resolu√ß√µes
- Extrair texto dos PDFs para an√°lise
- Executar todo o pipeline completo
- Verificar o status atual dos dados

Uso:
    python main.py scrape                    # Coleta dados das resolu√ß√µes
    python main.py download [ARQUIVO_CSV]    # Baixa PDFs das resolu√ß√µes
    python main.py extract [ARQUIVO_CSV]     # Extrai texto dos PDFs
    python main.py full                      # Pipeline completo (coletar + baixar + extrair)
    python main.py status                    # Mostra status do projeto

Exemplos:
    python main.py scrape                    # Inicia coleta de resolu√ß√µes
    python main.py download resolucoes.csv   # Baixa PDFs do arquivo especificado
    python main.py full                      # Executa processo completo
"""

import argparse
import sys
import os
from pathlib import Path

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.scraper import main as scraper_main, baixar_todos_pdfs
from src.text_extractor import criar_base_completa_com_textos
import glob


def encontrar_csv_mais_recente(padrao="cns_resolucoes_*.csv", padroes_exclusao=None):
    """
    Encontra o arquivo CSV mais recente que corresponde ao padr√£o especificado.
    
    Esta fun√ß√£o √© √∫til para automaticamente usar o arquivo CSV mais recente
    quando o usu√°rio n√£o especifica um arquivo espec√≠fico.
    
    Args:
        padrao (str): Padr√£o glob para buscar arquivos CSV
        padroes_exclusao (list): Lista de padr√µes a excluir da busca
        
    Returns:
        str: Caminho para o arquivo CSV mais recente, ou None se nenhum for encontrado
    """
    if padroes_exclusao is None:
        padroes_exclusao = ['teste', 'com_textos', 'temp']
    
    arquivos_csv = glob.glob(padrao)
    arquivos_csv = [f for f in arquivos_csv if not any(excl in f for excl in padroes_exclusao)]
    
    if not arquivos_csv:
        return None
    
    return max(arquivos_csv, key=os.path.getctime)


def cmd_coletar(_args):
    """
    Executa o comando de coleta de dados das resolu√ß√µes.
    
    Este comando acessa o site oficial do CNS e coleta todos os metadados
    das resolu√ß√µes dispon√≠veis, salvando em um arquivo CSV.
    
    Args:
        _args: Argumentos da linha de comando (n√£o utilizados neste comando)
        
    Returns:
        bool: True se a coleta foi bem-sucedida, False caso contr√°rio
    """
    del _args  # Suprime aviso de vari√°vel n√£o utilizada
    print("üï∑Ô∏è Iniciando coleta de metadados das resolu√ß√µes CNS...")
    df_resultado = scraper_main()
    if df_resultado is not None:
        print("‚úÖ Coleta conclu√≠da com sucesso!")
        return True
    else:
        print("‚ùå Coleta falhou!")
        return False


def cmd_baixar(args):
    """
    Executa o comando de download dos arquivos PDF das resolu√ß√µes.
    
    Este comando l√™ um arquivo CSV com dados das resolu√ß√µes e baixa
    os arquivos PDF correspondentes, organizando-os por ano.
    
    Args:
        args: Argumentos da linha de comando contendo:
              - csv_file: Caminho para arquivo CSV (opcional)
              
    Returns:
        bool: True se o download foi bem-sucedido, False caso contr√°rio
    """
    arquivo_csv = args.csv_file
    
    if not arquivo_csv:
        arquivo_csv = encontrar_csv_mais_recente()
        if not arquivo_csv:
            print("‚ùå Nenhum arquivo CSV encontrado!")
            print("   Dica: Execute 'python main.py scrape' primeiro ou especifique um arquivo CSV.")
            return False
        print(f"üìÅ Usando o arquivo CSV mais recente: {arquivo_csv}")
    
    if not os.path.exists(arquivo_csv):
        print(f"‚ùå Arquivo CSV n√£o encontrado: {arquivo_csv}")
        return False
    
    print(f"üì• Iniciando download de PDFs de: {arquivo_csv}")
    resultado = baixar_todos_pdfs(arquivo_csv, pular_existentes=True)
    
    if resultado and isinstance(resultado, dict) and isinstance(resultado.get('sucessos', 0), int) and resultado['sucessos'] > 0:
        print("‚úÖ Download de PDFs conclu√≠do com sucesso!")
        return True
    else:
        print("‚ùå Download de PDFs falhou!")
        return False


def cmd_extrair(args):
    """
    Executa o comando de extra√ß√£o de texto dos PDFs baixados.
    
    Este comando processa todos os arquivos PDF baixados, extrai o texto
    de cada um e combina com os metadados das resolu√ß√µes, gerando uma
    base de dados completa.
    
    Args:
        args: Argumentos da linha de comando contendo:
              - csv_file: Caminho para arquivo CSV (opcional)
              
    Returns:
        bool: True se a extra√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    arquivo_csv = args.csv_file
    
    if not arquivo_csv:
        arquivo_csv = encontrar_csv_mais_recente()
        if not arquivo_csv:
            print("‚ùå Nenhum arquivo CSV encontrado!")
            print("   Dica: Execute 'python main.py scrape' primeiro ou especifique um arquivo CSV.")
            return False
        print(f"üìÅ Usando o arquivo CSV mais recente: {arquivo_csv}")
    
    if not os.path.exists(arquivo_csv):
        print(f"‚ùå Arquivo CSV n√£o encontrado: {arquivo_csv}")
        return False
    
    print(f"üìÑ Iniciando extra√ß√£o de texto de: {arquivo_csv}")
    df_resultado = criar_base_completa_com_textos(arquivo_csv)
    
    if df_resultado is not None:
        print("‚úÖ Extra√ß√£o de texto conclu√≠da com sucesso!")
        return True
    else:
        print("‚ùå Extra√ß√£o de texto falhou!")
        return False


def cmd_completo(args):
    """
    Executa o pipeline completo de processamento das resolu√ß√µes CNS.
    
    Este comando executa sequencialmente:
    1. Coleta de dados das resolu√ß√µes do site oficial
    2. Download dos arquivos PDF das resolu√ß√µes
    3. Extra√ß√£o de texto dos PDFs e combina√ß√£o com metadados
    
    √â a forma mais conveniente de obter uma base completa de dados.
    
    Args:
        args: Argumentos da linha de comando
        
    Returns:
        bool: True se todo o pipeline foi executado com sucesso, False caso contr√°rio
    """
    print("üöÄ Iniciando pipeline completo de processamento de resolu√ß√µes CNS...")
    print("=" * 60)
    
    # PASSO 1: Coleta de metadados
    print("üìä PASSO 1: Coletando metadados das resolu√ß√µes...")
    if not cmd_coletar(args):
        return False
    
    # Encontra o arquivo CSV criado pela coleta
    arquivo_csv = encontrar_csv_mais_recente()
    if not arquivo_csv:
        print("‚ùå N√£o foi poss√≠vel encontrar o arquivo CSV rec√©m coletado!")
        print("   Verifique se a coleta foi conclu√≠da com sucesso.")
        return False
    
    # PASSO 2: Download dos arquivos PDF
    print(f"\nüì• PASSO 2: Baixando arquivos PDF das resolu√ß√µes...")
    args.csv_file = arquivo_csv  # Define arquivo CSV para as etapas seguintes
    if not cmd_baixar(args):
        return False
    
    # PASSO 3: Extra√ß√£o de texto dos PDFs
    print(f"\nüìÑ PASSO 3: Extraindo texto dos PDFs e criando base completa...")
    if not cmd_extrair(args):
        return False
    
    print("\nüéâ Pipeline completo conclu√≠do com sucesso!")
    print("üìä Sua base completa de resolu√ß√µes CNS est√° pronta para uso!")
    print("üìÅ Verifique os arquivos gerados no diret√≥rio atual.")
    return True


def cmd_status(_args):
    """
    Mostra o status atual do projeto CNS Raspador.
    
    Este comando examina o diret√≥rio atual e mostra informa√ß√µes sobre:
    - Arquivos CSV de resolu√ß√µes coletadas
    - Arquivos PDF baixados (total e distribui√ß√£o por ano)
    - Arquivos de extra√ß√£o de texto processados
    
    √ötil para verificar o progresso e entender o estado atual dos dados.
    
    Args:
        _args: Argumentos da linha de comando (n√£o utilizados neste comando)
    """
    del _args  # Suprime aviso de vari√°vel n√£o utilizada
    print("üìä Status do Projeto CNS Raspador")
    print("=" * 40)
    
    # Verificar arquivos CSV
    arquivos_csv = glob.glob("cns_resolucoes_*.csv")
    if arquivos_csv:
        print(f"üìÑ Arquivos CSV encontrados: {len(arquivos_csv)}")
        mais_recente = encontrar_csv_mais_recente()
        if mais_recente:
            print(f"   Mais recente: {mais_recente}")
    else:
        print("üìÑ Nenhum arquivo CSV de resolu√ß√µes encontrado")
        print("   Execute 'python main.py scrape' para coletar os dados")
    
    # Verificar PDFs
    pasta_pdfs = Path("pdfs_cns_resolucoes")
    if pasta_pdfs.exists():
        total_pdfs = len(list(pasta_pdfs.glob("**/*.pdf")))
        print(f"üìÅ PDFs baixados: {total_pdfs}")
        
        # Contar por ano
        pastas_ano = [f for f in pasta_pdfs.iterdir() if f.is_dir()]
        if pastas_ano:
            print("   Distribui√ß√£o por ano:")
            for pasta_ano in sorted(pastas_ano):
                quantidade = len(list(pasta_ano.glob("*.pdf")))
                print(f"     {pasta_ano.name}: {quantidade} PDFs")
    else:
        print("üìÅ Nenhuma pasta de PDFs encontrada")
        print("   Execute 'python main.py download' para baixar os PDFs")
    
    # Verificar resultados de extra√ß√£o de texto
    arquivos_texto = glob.glob("cns_resolucoes_com_textos_*.csv")
    if arquivos_texto:
        print(f"üìù Arquivos de extra√ß√£o de texto: {len(arquivos_texto)}")
        texto_mais_recente = max(arquivos_texto, key=os.path.getctime)
        print(f"   Mais recente: {texto_mais_recente}")
    else:
        print("üìù Nenhum arquivo com texto extra√≠do encontrado")
        print("   Execute 'python main.py extract' para processar os PDFs")


def main():
    """
    Fun√ß√£o principal da interface de linha de comando.
    
    Configura o parser de argumentos, define todos os subcomandos dispon√≠veis
    e executa o comando solicitado pelo usu√°rio.
    
    Os comandos dispon√≠veis s√£o:
    - scrape: Coleta dados das resolu√ß√µes
    - download: Baixa arquivos PDF
    - extract: Extrai texto dos PDFs
    - full: Executa pipeline completo
    - status: Mostra status do projeto
    """
    parser = argparse.ArgumentParser(
        description="CNS Raspador - Ferramenta completa para coleta e processamento de resolu√ß√µes do Conselho Nacional de Sa√∫de",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main.py scrape                  # Coleta dados das resolu√ß√µes
  python main.py download                # Baixa PDFs (usa CSV mais recente)
  python main.py extract resolucoes.csv # Extrai texto do arquivo especificado
  python main.py full                    # Executa processo completo
  python main.py status                  # Verifica status atual

Para mais informa√ß√µes sobre cada comando, use: python main.py <comando> --help
        """
    )
    
    subparsers = parser.add_subparsers(
        dest='command', 
        help='Comandos dispon√≠veis',
        metavar='COMANDO',
        description='Use um dos comandos abaixo para executar a√ß√µes espec√≠ficas'
    )
    
    # Comando de coleta
    parser_scrape = subparsers.add_parser(
        'scrape', 
        help='Coleta metadados das resolu√ß√µes do site oficial do CNS',
        description='Acessa o site oficial do CNS e coleta informa√ß√µes sobre todas as resolu√ß√µes dispon√≠veis'
    )
    
    # Comando de download
    parser_download = subparsers.add_parser(
        'download', 
        help='Baixa os arquivos PDF das resolu√ß√µes',
        description='Baixa todos os arquivos PDF das resolu√ß√µes listadas no arquivo CSV, organizando por ano'
    )
    parser_download.add_argument(
        'csv_file', 
        nargs='?', 
        help='Arquivo CSV com dados das resolu√ß√µes (opcional - usa o mais recente se n√£o especificado)',
        metavar='ARQUIVO_CSV'
    )
    
    # Comando de extra√ß√£o
    parser_extrair = subparsers.add_parser(
        'extract', 
        help='Extrai texto dos PDFs baixados e cria base completa',
        description='Processa todos os PDFs baixados, extrai o texto e combina com os metadados das resolu√ß√µes'
    )
    parser_extrair.add_argument(
        'csv_file', 
        nargs='?', 
        help='Arquivo CSV com dados das resolu√ß√µes (opcional - usa o mais recente se n√£o especificado)',
        metavar='ARQUIVO_CSV'
    )
    
    # Comando de pipeline completo
    parser_full = subparsers.add_parser(
        'full', 
        help='Executa o pipeline completo (coletar + baixar + extrair)',
        description='Executa automaticamente todo o processo: coleta de dados, download de PDFs e extra√ß√£o de texto'
    )
    
    # Comando de status
    parser_status = subparsers.add_parser(
        'status', 
        help='Mostra o status atual do projeto',
        description='Examina os arquivos do projeto e mostra estat√≠sticas sobre dados coletados, PDFs baixados e texto extra√≠do'
    )
    
    # Processa os argumentos da linha de comando
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # Mapeia comandos para suas respectivas fun√ß√µes
    comandos = {
        'scrape': cmd_coletar,      # Coleta de dados
        'download': cmd_baixar,     # Download de PDFs
        'extract': cmd_extrair,     # Extra√ß√£o de texto
        'full': cmd_completo,       # Pipeline completo
        'status': cmd_status        # Status do projeto
    }
    
    # Executa o comando selecionado
    try:
        sucesso = comandos[args.command](args)
        sys.exit(0 if sucesso else 1)
    except KeyboardInterrupt:
        print("\n\n‚ùå Opera√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        print("Execute 'python main.py status' para verificar o estado atual")
        sys.exit(1)


if __name__ == "__main__":
    main()